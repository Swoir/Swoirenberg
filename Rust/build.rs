use std::fs;
use std::path::PathBuf;
use std::fs::{OpenOptions};
use std::io::{self, Read, Seek, SeekFrom, Write};

fn prepend_to_file(file_path: &str, prepend_str: &str) -> io::Result<()> {
    let mut file = OpenOptions::new().read(true).write(true).open(file_path)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    file.seek(SeekFrom::Start(0))?;
    file.write_all(prepend_str.as_bytes())?;
    file.write_all(contents.as_bytes())?;

    Ok(())
}

fn main() -> io::Result<()> {
    // Generate swift-bridge files
    println!("build.rs: Generating swift-bridge files");
    let out_dir = PathBuf::from("../.artifacts/swift-bridge");
    let bridges = vec!["src/lib.rs"];
    for path in &bridges {
        println!("cargo:rerun-if-changed={}", path);
    }
    swift_bridge_build::parse_bridges(bridges).write_all_concatenated(out_dir, "SwiftBridge");

    // Move swift-bridge files into Swift package
    fs::rename("../.artifacts/swift-bridge/SwiftBridgeCore.swift", "../Swift/Sources/Swoirenberg/SwiftBridgeCore.swift")?;
    fs::rename("../.artifacts/swift-bridge/SwiftBridge/SwiftBridge.swift", "../Swift/Sources/Swoirenberg/SwiftBridge.swift")?;
    // Add imports to swift-bridge files
    for path in &["../Swift/Sources/Swoirenberg/SwiftBridgeCore.swift", "../Swift/Sources/Swoirenberg/SwiftBridge.swift"] {
        let _ = prepend_to_file(path, "// File automatically generated by swift-bridge.\nimport SwoirenbergLib\n");
    }

    Ok(())
}
